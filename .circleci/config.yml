version: 2.1
executors:
  golang:
    docker:
      - image: circleci/golang:1.15
commands:
  load_env:
    steps:
      - run:
          name: Setup Environment Variables
          command: |
            [[ -z $CIRCLE_TAG ]] && IMAGE_TAG=${CIRCLE_BRANCH//\//-}.${CIRCLE_SHA1:0:7} || IMAGE_TAG=${CIRCLE_TAG}
            IMG="quay.io/domino/forge:${IMAGE_TAG}"
            VERSION="${IMAGE_TAG}"

            echo "export IMG=${IMG}" >> $BASH_ENV
            echo "export VERSION=${IMAGE_TAG}" >> $BASH_ENV
            echo "export BUILD_FLAGS=\"-ldflags='-X github.com/dominodatalab/forge/cmd.version=${VERSION} -X github.com/dominodatalab/forge/cmd.buildJobImage=${IMG}'\"" >> $BASH_ENV
jobs:
  build:
    executor: golang
    environment:
      KUBEBUILDER_VERSION: 2.2.0
      GOLANGCI_LINT_VERSION: v1.30.0
    steps:
      - checkout
      - load_env
      - run:
          name: Install golangci-lint
          command: |
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin $GOLANGCI_LINT_VERSION
      - run:
          name: Install Kubebuilder
          command: |
            os=$(go env GOOS)
            arch=$(go env GOARCH)
            curl -L https://go.kubebuilder.io/dl/${KUBEBUILDER_VERSION}/${os}/${arch} | tar -xz -C /tmp/
            sudo mv /tmp/kubebuilder_${KUBEBUILDER_VERSION}_${os}_${arch} /usr/local/kubebuilder
            echo 'export PATH="$PATH:/usr/local/kubebuilder/bin"' >> $BASH_ENV
      - restore_cache:
          keys:
            - go-modules-v1-{{ checksum "go.sum" }}
      - run:
          name: Run Unit Tests
          command: make all test BUILD_FLAGS="${BUILD_FLAGS}"
      - run:
          name: Prepare Artifacts
          command: mkdir -p artifacts && cp bin/* config/crd/bases/* artifacts/
      - persist_to_workspace:
          root: ./artifacts
          paths:
            - "*"
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            ARGS="--label build='${CIRCLE_BUILD_URL}' --label author='${CIRCLE_USERNAME}' --label commit-sha='${CIRCLE_SHA1}'"
            if [[ ${CIRCLE_BRANCH} != "master" && -z ${CIRCLE_TAG} ]]; then
              ARGS="$ARGS --label quay.expires-after='4w'"
            fi
            ARGS="$ARGS --build-arg BUILD_FLAGS=\"${BUILD_FLAGS}\""

            make docker-build ARGS="${ARGS}"
      - run:
          name: Push Docker Image
          command: |
            docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
            make docker-push
      - save_cache:
          key: go-modules-v1-{{ checksum "go.sum" }}
          paths:
            - /$GOPATH/pkg/mod
  test:
    machine:
      image: ubuntu-1604:202004-01
    environment:
      KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      HELM_VERSION: "v3.2.1"
      KUSTOMIZE_VERSION: "v3.5.5"
      K3S_KUBECONFIG_MODE: "644"
    steps:
      - checkout
      - load_env
      - run:
          name: Install and Launch Kubernetes
          command: curl -sfL https://get.k3s.io | sh -
      - run:
          name: Install Helm
          command: |
            curl -L https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar -xvz -C /tmp
            sudo mv /tmp/linux-amd64/helm /usr/local/bin/
      - run:
          name: Install Kustomize
          command: |
            curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64.tar.gz | tar -xzv -C /tmp
            sudo mv /tmp/kustomize /usr/local/bin/
      - run:
          name: Run e2e tests
          command: ./e2e/run-test.sh ${IMG}
      - run:
          name: Debug Information
          command: kubectl cluster-info dump --all-namespaces --output-directory=./cluster-state/
          when: always
      - store_artifacts:
          path: cluster-state
  publish_release:
    executor: golang
    environment:
      GHR_VERSION: v0.13.0
    steps:
      - run:
          name: Install ghr
          command: GO111MODULE="on" go get -v github.com/tcnksm/ghr@${GHR_VERSION}
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Publish GitHub Release
          command: |
            ghr \
              -token ${GITHUB_TOKEN} \
              -owner ${CIRCLE_PROJECT_USERNAME} \
              -repository ${CIRCLE_PROJECT_REPONAME} \
              -commitish ${CIRCLE_SHA1} \
              -prerelease \
              $(./artifacts/forge version) \
              artifacts/
workflows:
  version: 2
  main:
    jobs:
      - build:
          context: org-global
          filters:
            tags:
              only: /v\d+(\.\d+)*(-.*)*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /v\d+(\.\d+)*(-.*)*/
      - publish_release:
          requires:
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v\d+(\.\d+)*(-.*)*/
