version: 2.1
executors:
  golang:
    docker:
      - image: cimg/go:1.16
orbs:
  azure-cli: circleci/azure-cli@1.2.0
commands:
  load_env:
    steps:
      - run:
          name: Setup Environment Variables
          command: |
            [[ -z $CIRCLE_TAG ]] && IMAGE_TAG=${CIRCLE_BRANCH//\//-}.${CIRCLE_SHA1:0:7} || IMAGE_TAG=${CIRCLE_TAG}
            IMG="quay.io/domino/forge:${IMAGE_TAG}"
            VERSION="${IMAGE_TAG}"

            echo "export IMG=${IMG}" >> $BASH_ENV
            echo "export VERSION=${IMAGE_TAG}" >> $BASH_ENV
            echo "export BUILD_FLAGS=\"-ldflags='-X github.com/dominodatalab/forge/cmd.version=${VERSION}'\"" >> $BASH_ENV
            echo "export GOOGLE_APPLICATION_CREDENTIALS='/tmp/gcp-${CIRCLE_BUILD_NUM}.json'" >> $BASH_ENV
            echo ${CLOUDSDK_SERVICE_KEY} > "/tmp/gcp-${CIRCLE_BUILD_NUM}.json"

jobs:
  build:
    executor: golang
    environment:
      GOLANGCI_LINT_VERSION: v1.30.0
    steps:
      - checkout
      - azure-cli/install
      - run:
          name: Create ACR
          command: |
            az login --service-principal -u "${AZURE_CLIENT_ID}" -p "${AZURE_CLIENT_SECRET}" --tenant "${AZURE_TENANT_ID}"

            export ACR_VARS=/tmp/workspace/acr_vars
            mkdir -p $(dirname $ACR_VARS)
            echo "export ACR_NAME=forge${CIRCLE_BUILD_NUM}" >> $ACR_VARS
            echo "export ACR_RG=forge${CIRCLE_BUILD_NUM}" >> $ACR_VARS
            echo "export ACR_LOCATION=westus2" >> $ACR_VARS
            . $ACR_VARS
            cat $ACR_VARS >> $BASH_ENV

            az group create -n ${ACR_RG} -l ${ACR_LOCATION}
            az acr create -n ${ACR_NAME} -g ${ACR_RG} -l ${ACR_LOCATION} --sku Basic
            echo "export ACR_REGISTRY=$(az acr show -n ${ACR_NAME} -g ${ACR_RG} --query loginServer)" >> $BASH_ENV
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - acr_vars
      - load_env
      - run:
          name: pre-commit
          command: make precommit
      - restore_cache:
          keys:
            - go-modules-v1-{{ checksum "go.sum" }}
      - run:
          name: Run Unit Tests
          command: make all test BUILD_FLAGS="${BUILD_FLAGS}"
      - run:
          name: Prepare Artifacts
          command: mkdir -p artifacts && cp bin/* config/crd/bases/* artifacts/
      - persist_to_workspace:
          root: ./artifacts
          paths:
            - "*"
      - setup_remote_docker:
          version: "20.10.11"
      - run:
          name: Build Docker Image
          command: |
            ARGS="--label build='${CIRCLE_BUILD_URL}' --label author='${CIRCLE_USERNAME}' --label commit-sha='${CIRCLE_SHA1}'"
            if [[ ${CIRCLE_BRANCH} != "master" && -z ${CIRCLE_TAG} ]]; then
              ARGS="$ARGS --label quay.expires-after='4w'"
            fi
            ARGS="$ARGS --build-arg BUILD_FLAGS=\"${BUILD_FLAGS}\""

            make docker-build ARGS="${ARGS}"
      - run:
          name: Push Docker Image
          command: |
            docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
            make docker-push
      - save_cache:
          key: go-modules-v1-{{ checksum "go.sum" }}
          paths:
            - /$GOPATH/pkg/mod
      - run:
          name: Destroy ACR
          when: on_fail
          command: |
            az group delete -y -n ${ACR_RG}
  test:
    machine:
      image: ubuntu-2004:202107-02
    environment:
      KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      HELM_VERSION: "v3.6.3"
      KUSTOMIZE_VERSION: "v4.3.0"
      K3S_KUBECONFIG_MODE: "644"
    steps:
      - checkout
      - load_env
      - attach_workspace:
          at: /tmp/workspace
      - run: cat /tmp/workspace/acr_vars >> $BASH_ENV
      - azure-cli/install
      - run:
          name: Install and Launch Kubernetes
          command: curl -sfL https://get.k3s.io | sh -
      - run:
          name: Install Helm
          command: |
            curl -L https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar -xvz -C /tmp
            sudo mv /tmp/linux-amd64/helm /usr/local/bin/
      - run:
          name: Install Kustomize
          command: |
            curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64.tar.gz | tar -xzv -C /tmp
            sudo mv /tmp/kustomize /usr/local/bin/
      - run:
          name: Run e2e tests
          command: |
            az login --service-principal -u "${AZURE_CLIENT_ID}" -p "${AZURE_CLIENT_SECRET}" --tenant "${AZURE_TENANT_ID}"
            ./e2e/run-test.sh ${IMG}
      - run:
          name: Debug Information
          command: kubectl cluster-info dump --all-namespaces --output-directory=./cluster-state/
          when: always
      - store_artifacts:
          path: cluster-state
      - run:
          name: Destroy ACR
          when: always
          command: |
            az login --service-principal -u "${AZURE_CLIENT_ID}" -p "${AZURE_CLIENT_SECRET}" --tenant "${AZURE_TENANT_ID}"
            az group delete -y -n ${ACR_RG}

workflows:
  version: 2
  main:
    jobs:
      - build:
          context:
            - org-global
          filters:
            tags:
              only: /v\d+(\.\d+)*(-.*)*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /v\d+(\.\d+)*(-.*)*/
